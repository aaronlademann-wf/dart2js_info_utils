import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:dart2js_info_utils/data.dart';
import 'package:meta/meta.dart';

const String packageName = 'dart2js_info_utils';
const String dart2jsInfoOutputPathArg = 'output-path';
const String dart2jsInfoJsFileArg = 'js-file';
const String dart2jsInfoBuildFlag = 'build';
const String dart2jsInfoGenerateFlag = 'regenerate';
const String dart2jsInfoBuildModeArg = 'build-mode';

main(List<String> args) async {
  var parser = new ArgParser()
    ..addFlag('help', abbr: 'h', help: 'Print help.')
    ..addOption(dart2jsInfoOutputPathArg,
        help: 'The relative path to the place where you want dart2js_info data to live.',
        defaultsTo: dart2jsInfoPath,
    )
    ..addOption(dart2jsInfoJsFileArg,
        help: 'The relative path to the *.dart.js file that you want information about.',
        defaultsTo: 'build/web/main.dart.js',
    )
    ..addOption(dart2jsInfoBuildModeArg,
        help: 'When `--$dart2jsInfoBuildFlag` is true, this will set the value of the `--mode` argument for the `pub build` task.',
        defaultsTo: 'release',
        allowed: ['release', 'debug'],
    )
    ..addFlag(dart2jsInfoGenerateFlag,
        help: 'Whether you want to regenerate the dart2js_info data. Will happen no matter what if --${dart2jsInfoBuildFlag} is true.',
        defaultsTo: false,
    )
    ..addFlag(dart2jsInfoBuildFlag,
        help: 'Whether a clean `pub build` is necessary.',
        defaultsTo: false,
    );

  try {
    var argValues = parser.parse(args);

    if (argValues['help']) {
      print('Utilities to parse, distill and visualize data generated by the dart2js_info package.\n');
      print(parser.usage);
      return;
    }

    new Dart2JsInfoUtils(argValues: argValues);
  } on FormatException {
    print(parser.usage);
    exit(-1);
  }
}

class Dart2JsInfoUtils {
  final ArgResults argValues;

  Dart2JsInfoUtils({@required this.argValues}) { initialize(); }

  Future<Null> initialize() async {
    this._exitCode = 0;

    if (rebuildPackage) await _buildPackage();
    if (rebuildPackage || regenerateDart2JsInfoData) await _generateDart2JsInfoData();

    _generateDataMapViews();
    _copyStatics();
  }

  int get exitCode => _exitCode;
  int _exitCode;

  bool get rebuildPackage => argValues[dart2jsInfoBuildFlag];
  bool get regenerateDart2JsInfoData => argValues[dart2jsInfoGenerateFlag];
  String get jsFile => argValues[dart2jsInfoJsFileArg];
  String get jsInfoJsonFile => '$jsFile.info.json';
  String get dart2JsInfoOutputDir => '${argValues[dart2jsInfoOutputPathArg]}/$dart2JsInfoOutputSubDir';
  String get dart2JsInfoUtilMapViewDataOutputDir => '$dart2JsInfoOutputDir/$dart2JsInfoUtilMapViewDataOutputSubDir';

  // ----------------------------------------------------
  //  Helper Methods
  // ----------------------------------------------------

  void _exitCheck([ProcessResult result]) {
    if (result != null) this._exitCode = result.exitCode;

    if (this.exitCode != 0) {
      if (stderr != null) {
        print('ERROR(${this.exitCode}): \n$stderr');
      }
      exit(this.exitCode);
    }
  }

  /// Runs dart2js_info_[cmd] and writes the [ProcessResult.stdout] to a file at [outFilePath].
  Future<Null> _runDart2JsInfoCmd(String cmd, String outFilePath) async {
    cmd = cmd.replaceFirst('dart2js_info_', '');

    final result = await Process.run('dart2js_info_$cmd', [jsInfoJsonFile]);
    _exitCheck(result);

    var file = new File(outFilePath);
    if (!file.existsSync()) {
      file.createSync(recursive: true);
    }

    var stdout = result.stdout;
    if (cmd == 'deferred_library_layout') {
      stdout = result.stdout.replaceFirst('loaded by default', 'loaded by:');
    }

    file.writeAsStringSync(stdout);
    print('Successfully ran `dart2js_info_$cmd` and wrote the result to `$outFilePath`.');
  }

  // ----------------------------------------------------
  //  Core Process Methods
  // ----------------------------------------------------

  Future<Null> _buildPackage() async {
    print('Building libary... (Grab a Snickers)');

    final result = await Process.run('pub', ['build', '--mode=${argValues[dart2jsInfoBuildModeArg]}']);
    _exitCheck(result);

    print(result.stdout);
  }

  Future<Null> _generateDart2JsInfoData() async {
    await _activateDart2JsInfoPackage();

    print('Generating information about $jsFile...');

    await _runDart2JsInfoCmd('library_size_split', '$dart2JsInfoOutputDir/$dart2JsInfoLibSizeSplitOutFileName');
    await _runDart2JsInfoCmd('deferred_library_layout', '$dart2JsInfoOutputDir/$dart2JsInfoDeferredLibLayoutOutFileName');
  }

  Future<Null> _activateDart2JsInfoPackage() async {
    final result = await Process.run('pub', ['global', 'activate', 'dart2js_info']);
    _exitCheck(result);

    print('Successfully activated the dart2js_info package.');
  }

  /// Constructs [DeferredLibraryLayoutView]s using the data generated by the
  /// `dart2js_info` package (via [_generateDart2JsInfoData]) and writes raw Dart [Map]s
  /// to files within [dart2JsInfoUtilMapViewDataOutputDir].
  void _generateDataMapViews() {
    print('Mapping Raw Data Generated By `dart2js_info`...');

    try {
      new DeferredLibraryLayoutView.groupByPackage(
          dart2JsInfoOutputDir: dart2JsInfoOutputDir,
          dart2JsInfoUtilMapViewDataOutputDir: dart2JsInfoUtilMapViewDataOutputDir,
      ).toFile();
    } catch (err, stackTrace) {
      print(err);
      print(stackTrace);

      this._exitCode = -1;
      _exitCheck();
    }

    try {
      new DeferredLibraryLayoutView.groupByPart(
          dart2JsInfoOutputDir: dart2JsInfoOutputDir,
          dart2JsInfoUtilMapViewDataOutputDir: dart2JsInfoUtilMapViewDataOutputDir,
      ).toFile();
    } catch (err, stackTrace) {
      print(err);
      print(stackTrace);

      this._exitCode = -1;
      _exitCheck();
    }
  }

  void _copyStatics() {
    print('Copying Web Interface Static Files...');
    final String sep = Platform.pathSeparator;

    var utilsPath = new File('.packages')
        .readAsLinesSync()
        .firstWhere((line) => line.startsWith(packageName))
        // Lines are of the form <package>:<path>,
        // "dart2js_info_utils:" so we skip the
        // package name characters to isolate the path.
        .substring(packageName.length + 1)
        // Strip leading protocol
        .replaceFirst('file://', '')
        // Strip trailing path separators
        .replaceFirst(new RegExp('$sep\$'), '');

    var pathToStatics = '$utilsPath${sep}src${sep}statics';
    try {
      new File('$pathToStatics${sep}main.dart').copySync('${argValues[dart2jsInfoOutputPathArg]}${sep}main.dart');
    } catch (err, stackTrace) {
      print(err);
      print(stackTrace);

      this._exitCode = -1;
      _exitCheck();
    }

    try {
      new File('$pathToStatics${sep}index.html').copySync('${argValues[dart2jsInfoOutputPathArg]}${sep}index.html');
    } catch (err, stackTrace) {
      print(err);
      print(stackTrace);

      this._exitCode = -1;
      _exitCheck();
    }

    // ignore: avoid_as
    final importInstructionsPath = dart2JsInfoUtilMapViewDataOutputDir.replaceFirst('./', '');

    print('''
All done!

You can now explore the data in your browser by running

    `pub serve benchmark`

Or access it as a raw Dart map by importing it:

    ```
    import 'package:dart2js_info_utils/data.dart';
    
    // ignore: uri_does_not_exist
    import '$importInstructionsPath/$dart2JsInfoUtilMapViewByPackageFile' as data_by_package;
    // ignore: uri_does_not_exist 
    import '$importInstructionsPath/$dart2JsInfoUtilMapViewByPartFile' as data_by_part;
    
    
    var byPackageRawData = data_by_package.deferredLibraryLayoutByPackage;
    var byPartRawData = data_by_part.deferredLibraryLayoutByPart;
    
    // Use MapViews for typed access to the raw data!
    var byPackageMapView = new DeferredLibraryLayoutByPackageMapView(byPackageRawData);
    var byPartMapView = new DeferredLibraryLayoutByPartMapView(byPartRawData);
    ```
    ''');

    _exitCheck();
  }
}
