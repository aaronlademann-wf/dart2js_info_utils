import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:dart2js_info_utils/data.dart';

const String packageName = 'dart2js_info_utils';
const String dart2jsInfoOutputPathArg = 'output-path';
const String dart2jsInfoJsFileArg = 'js-file';
const String dart2jsInfoBuildFlag = 'build';
const String dart2jsInfoGenerateFlag = 'regenerate';
const String dart2jsInfoBuildModeArg = 'build-mode';

main(List<String> args) async {
  var parser = new ArgParser()
    ..addFlag('help', abbr: 'h', help: 'Print help.')
    ..addOption(dart2jsInfoOutputPathArg,
        help: 'The relative path to the place where you want dart2js_info data to live.',
        defaultsTo: dart2jsInfoPath,
    )
    ..addOption(dart2jsInfoJsFileArg,
        help: 'The relative path to the *.dart.js file that you want information about.',
        defaultsTo: 'build/web/main.dart.js',
    )
    ..addOption(dart2jsInfoBuildModeArg,
        help: 'When `--$dart2jsInfoBuildFlag` is true, this will set the value of the `--mode` argument for the `pub build` task.',
        defaultsTo: 'release',
        allowed: ['release', 'debug'],
    )
    ..addFlag(dart2jsInfoGenerateFlag,
        help: 'Whether you want to regenerate the dart2js_info data. Will happen no matter what if --${dart2jsInfoBuildFlag} is true.',
        defaultsTo: false,
    )
    ..addFlag(dart2jsInfoBuildFlag,
        help: 'Whether a clean `pub build` is necessary.',
        defaultsTo: false,
    );

  try {
    var argValues = parser.parse(args);

    if (argValues['help']) {
      print('Utilities to parse, distill and visualize data generated by the dart2js_info package.\n');
      print(parser.usage);
      return;
    }

    exit(await _init(argValues));
  } on FormatException {
    print(parser.usage);
    exit(-1);
  }
}

Future<int> _init(ArgResults argValues) async {
  if (argValues[dart2jsInfoBuildFlag] == true) {
    print('Building libary... (Grab a Snickers)');

    await Process.run('pub', ['build', '--mode=${argValues[dart2jsInfoBuildModeArg]}']).then((result) {
      print(result.stdout);

      if (result.exitCode != 0) {
        print(result.stderr);
        return result.exitCode;
      }
    });
  }

  return _generate(argValues);
}

Future<int> _generate(ArgResults argValues) async {
  if (argValues[dart2jsInfoBuildFlag] == true || argValues[dart2jsInfoGenerateFlag] == true) {
    await Process.run('pub', ['global', 'activate', 'dart2js_info']).then((result) {
      if (result.exitCode != 0) {
        print(result.stderr);
        return result.exitCode;
      } else {
        print('Successfully activated the dart2js_info package.');
      }
    });

    print('Generating information about ${argValues[dart2jsInfoJsFileArg]}...');

    final infoJsonPath = '${argValues[dart2jsInfoJsFileArg]}.info.json';
    final sizeSplitDocPath = '${argValues[dart2jsInfoOutputPathArg]}/data/$librarySizeSplitFileName';
    final deferredLayoutDocPath = '${argValues[dart2jsInfoOutputPathArg]}/data/$deferredLibraryLayoutFileName';

    var sizeSplitFile = new File(sizeSplitDocPath);

    if (!sizeSplitFile.existsSync()) {
      sizeSplitFile.createSync(recursive: true);
    }

    var deferredLayoutFile = new File(deferredLayoutDocPath);

    if (!deferredLayoutFile.existsSync()) {
      deferredLayoutFile.createSync(recursive: true);
    }

    await Process.run('dart2js_info_library_size_split', [infoJsonPath]).then((result) {
      sizeSplitFile.writeAsStringSync(result.stdout);

      if (result.exitCode != 0) {
        print(result.stderr);
        return result.exitCode;
      }
    });

    print('Successfully generated `dart2js_info_library_size_split` info within $sizeSplitDocPath.');

    await Process.run('dart2js_info_deferred_library_layout', [infoJsonPath]).then((result) {
      deferredLayoutFile.writeAsStringSync(result.stdout.toString().replaceFirst('loaded by default', 'loaded by:'));

      if (result.exitCode != 0) {
        print(result.stderr);
        return result.exitCode;
      }
    });

    print('Successfully generated `dart2js_info_deferred_library_layout` info within $deferredLayoutDocPath.');
  }

  return _process(argValues);
}

int _process(ArgResults argValues) {
  final dart2jsInfoOutputPath = argValues[dart2jsInfoOutputPathArg];
  print('Processing Raw Data...');

  try {
    new DeferredLibraryLayoutView.groupByPackage(
        dataFilesPath: '$dart2jsInfoOutputPath/data',
        yamlFilePath: '$dart2jsInfoOutputPath/data',
    ).toFile();
  } catch (err, stackTrace) {
    print(err);
    print(stackTrace);
    return -1;
  }

  try {
    new DeferredLibraryLayoutView.groupByPart(
        dataFilesPath: '$dart2jsInfoOutputPath/data',
        yamlFilePath: '$dart2jsInfoOutputPath/data',
    ).toFile();
  } catch (err, stackTrace) {
    print(err);
    print(stackTrace);
    return -1;
  }

  return _copyStatics(argValues);
}

int _copyStatics(ArgResults argValues) {
  final dart2jsInfoOutputPath = argValues[dart2jsInfoOutputPathArg];
  int exitCode = 0;
  print('Copying Web Interface Static Files...');
  final String sep = Platform.pathSeparator;

  var utilsPath = new File('.packages')
      .readAsLinesSync()
      .firstWhere((line) => line.startsWith(packageName))
      // Lines are of the form <package>:<path>,
      // "dart2js_info_utils:" so we skip the
      // package name characters to isolate the path.
      .substring(packageName.length + 1)
      // Strip leading protocol
      .replaceFirst('file://', '')
      // Strip trailing path separators
      .replaceFirst(new RegExp('$sep\$'), '');

  var pathToStatics = '$utilsPath${sep}src${sep}statics';
  try {
    new File('$pathToStatics${sep}main.dart').copySync('$dart2jsInfoOutputPath${sep}main.dart');
  } catch (err, stackTrace) {
    print(err);
    print(stackTrace);
    exitCode = -1;
  }

  try {
    new File('$pathToStatics${sep}index.html').copySync('$dart2jsInfoOutputPath${sep}index.html');
  } catch (err, stackTrace) {
    print(err);
    print(stackTrace);
    exitCode = -1;
  }

  // ignore: avoid_as
  final importInstructionsPath = (argValues[dart2jsInfoOutputPathArg] as String).replaceFirst('./', '');

  print('''
All done!

You can now explore the data in your browser by running

    `pub serve benchmark`

Or access it as a raw Dart map by importing it:

    ```
    import 'package:dart2js_info_utils/data.dart';
    
    // ignore: uri_does_not_exist
    import '$importInstructionsPath/data/parsed/deferred_library_layout__by_package.dart' as data_by_package;
    // ignore: uri_does_not_exist 
    import '$importInstructionsPath/data/parsed/deferred_library_layout__by_part.dart' as data_by_part;
    
    
    var byPackageRawData = data_by_package.deferredLibraryLayoutByPackage;
    var byPartRawData = data_by_part.deferredLibraryLayoutByPart;
    
    // Use MapViews for typed access to the raw data!
    var byPackageMapView = new DeferredLibraryLayoutByPackageMapView(byPackageRawData);
    var byPartMapView = new DeferredLibraryLayoutByPartMapView(byPartRawData);
    ```
  ''');

  return exitCode;
}
